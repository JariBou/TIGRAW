//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerBundle/Player Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Actions"",
    ""maps"": [
        {
            ""name"": ""Player maps"",
            ""id"": ""3c747092-31ae-4fd9-90df-9fbfaae0713b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3b9e562d-d13f-44ba-8f96-f3aaadb82948"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport"",
                    ""type"": ""Button"",
                    ""id"": ""8549b579-0c2e-40b3-a304-16077530dcff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""330a8cbf-d462-43f6-a254-15022c70daa1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""451a998e-5756-4e2f-9a5a-053a822b5b27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ThunderStrike"",
                    ""type"": ""Button"",
                    ""id"": ""4225d3a2-fd9b-4b7f-b488-1967ce310cac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""25f4f4a1-4bba-484e-8197-eff558953bdd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""bbd279a1-415c-4e77-8b78-90168c7c1e59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenStats"",
                    ""type"": ""Button"",
                    ""id"": ""e882aab9-8bc8-45d1-a03c-e3078b7319e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e7be0715-2d1e-4b80-a497-5705c9a9339a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""34958cf5-0d11-44ea-817d-04b248e8aa32"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c83ecb12-a015-4dc8-ad5f-9ad685a62de7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""10db87d0-434e-4bfb-8f48-eaebb78f9932"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d5784abf-8927-4e07-af80-ae4732cac0b4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4aa676f2-6010-4cb6-b82a-5824e737df85"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db834bd9-d617-4ad0-99b6-b15cc1e6a277"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f1b22dc-b726-4b6d-ac70-7bdfb02f1231"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba44486d-c588-471d-899c-2322ab387062"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThunderStrike"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6faedec7-ed17-46b2-a778-5fcbab3440f0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cc21c2e-b80c-4734-b188-45979479526e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a97cb5ef-d4b9-47d6-97bc-8aa0c179dcbe"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenStats"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player maps
        m_Playermaps = asset.FindActionMap("Player maps", throwIfNotFound: true);
        m_Playermaps_Movement = m_Playermaps.FindAction("Movement", throwIfNotFound: true);
        m_Playermaps_Teleport = m_Playermaps.FindAction("Teleport", throwIfNotFound: true);
        m_Playermaps_Dash = m_Playermaps.FindAction("Dash", throwIfNotFound: true);
        m_Playermaps_BasicAttack = m_Playermaps.FindAction("BasicAttack", throwIfNotFound: true);
        m_Playermaps_ThunderStrike = m_Playermaps.FindAction("ThunderStrike", throwIfNotFound: true);
        m_Playermaps_Escape = m_Playermaps.FindAction("Escape", throwIfNotFound: true);
        m_Playermaps_Interact = m_Playermaps.FindAction("Interact", throwIfNotFound: true);
        m_Playermaps_OpenStats = m_Playermaps.FindAction("OpenStats", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player maps
    private readonly InputActionMap m_Playermaps;
    private IPlayermapsActions m_PlayermapsActionsCallbackInterface;
    private readonly InputAction m_Playermaps_Movement;
    private readonly InputAction m_Playermaps_Teleport;
    private readonly InputAction m_Playermaps_Dash;
    private readonly InputAction m_Playermaps_BasicAttack;
    private readonly InputAction m_Playermaps_ThunderStrike;
    private readonly InputAction m_Playermaps_Escape;
    private readonly InputAction m_Playermaps_Interact;
    private readonly InputAction m_Playermaps_OpenStats;
    public struct PlayermapsActions
    {
        private @PlayerActions m_Wrapper;
        public PlayermapsActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Playermaps_Movement;
        public InputAction @Teleport => m_Wrapper.m_Playermaps_Teleport;
        public InputAction @Dash => m_Wrapper.m_Playermaps_Dash;
        public InputAction @BasicAttack => m_Wrapper.m_Playermaps_BasicAttack;
        public InputAction @ThunderStrike => m_Wrapper.m_Playermaps_ThunderStrike;
        public InputAction @Escape => m_Wrapper.m_Playermaps_Escape;
        public InputAction @Interact => m_Wrapper.m_Playermaps_Interact;
        public InputAction @OpenStats => m_Wrapper.m_Playermaps_OpenStats;
        public InputActionMap Get() { return m_Wrapper.m_Playermaps; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayermapsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayermapsActions instance)
        {
            if (m_Wrapper.m_PlayermapsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnMovement;
                @Teleport.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnTeleport;
                @Teleport.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnTeleport;
                @Teleport.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnTeleport;
                @Dash.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnDash;
                @BasicAttack.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnBasicAttack;
                @ThunderStrike.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnThunderStrike;
                @ThunderStrike.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnThunderStrike;
                @ThunderStrike.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnThunderStrike;
                @Escape.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnEscape;
                @Interact.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnInteract;
                @OpenStats.started -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnOpenStats;
                @OpenStats.performed -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnOpenStats;
                @OpenStats.canceled -= m_Wrapper.m_PlayermapsActionsCallbackInterface.OnOpenStats;
            }
            m_Wrapper.m_PlayermapsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Teleport.started += instance.OnTeleport;
                @Teleport.performed += instance.OnTeleport;
                @Teleport.canceled += instance.OnTeleport;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @BasicAttack.started += instance.OnBasicAttack;
                @BasicAttack.performed += instance.OnBasicAttack;
                @BasicAttack.canceled += instance.OnBasicAttack;
                @ThunderStrike.started += instance.OnThunderStrike;
                @ThunderStrike.performed += instance.OnThunderStrike;
                @ThunderStrike.canceled += instance.OnThunderStrike;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @OpenStats.started += instance.OnOpenStats;
                @OpenStats.performed += instance.OnOpenStats;
                @OpenStats.canceled += instance.OnOpenStats;
            }
        }
    }
    public PlayermapsActions @Playermaps => new PlayermapsActions(this);
    public interface IPlayermapsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTeleport(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnBasicAttack(InputAction.CallbackContext context);
        void OnThunderStrike(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnOpenStats(InputAction.CallbackContext context);
    }
}
